Dependencies
JSTL Tags: 
	<dependency>
        	<groupId>javax.servlet</groupId>
        	<artifactId>jstl</artifactId>
      </dependency>

Allows us to dynamically populate our templates with data from the server

Also needs <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>  at the top of every JSP file for JSTL use

JSP Server Pages:
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-jasper</artifactId>
    </dependency>

Allows us to be able to easily integrate data into our web content to make our web pages dynamic

Webjars locator: 
    <dependency>
    	<groupId>org.webjars</groupId>
      <artifactId>webjars-locator</artifactId>
      <version>0.46</version>
     </dependency>

Enables auto detection of version, which means that your .jsp file links will be version-agnostic in case you update the versions here in your pom.xml

Bootstrap:
     <dependency>
       <groupId>org.webjars</groupId>
       <artifactId>bootstrap</artifactId>
       <version>5.2.3</version>
     </dependency>

Also needs 
For Bootstrap CSS
<link rel="stylesheet" href="/webjars/bootstrap/css/bootstrap.min.css" />
YOUR own local CSS
<link rel="stylesheet" href="/css/main.css"/>
For any Bootstrap that uses JS 
<script src="/webjars/bootstrap/js/bootstrap.min.js"></script>

MySQL Driver:

<dependency>
    <groupId>com.mysql</groupId>
    <artifactId>mysql-connector-j</artifactId>
    <scope>runtime</scope>
</dependency>

Spring Web:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>


Sring-Boot-Starter-Validations:
    
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
</dependency>  

Applications.Properties

Connecting Application to Schema:

spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>
spring.datasource.username=<<dbuser>>
spring.datasource.password=<<dbpassword>>
spring.jpa.hibernate.ddl-auto=update

WEB-INF: spring.mvc.view.prefix=/WEB-INF/

Allows us to look into the folder WEB-INF to serve up .jsp files